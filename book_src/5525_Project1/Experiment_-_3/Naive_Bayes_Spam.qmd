---
jupyter: python3
---

# <center>Spam Classification with Naive Bayes


***Context***
The SMS Spam Collection is a set of SMS tagged messages that have been collected for SMS Spam research. It contains one set of SMS messages in English of 5,574 messages, tagged according being ham (legitimate) or spam. Your job is to build a classifier to identify message as ham or spam. 

***Content***
The files contain one message per line. Each line is composed by two columns: first contains the label (ham or spam) and second coloumn contains the raw text.The dataset has been taken from [Kaggle](https://www.kaggle.com/uciml/sms-spam-collection-dataset).

```{python}
#| _cell_guid: b1076dfc-b9ad-4769-8c92-a6c4dae69d19
#| _uuid: 8f2839f25d086af736a60e9eeb907d3b93b6e0e5
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import nltk
```

**Reading the SMS data and checking the length of messages**

```{python}
#| _uuid: 4bb2b45f846f75fae48ea7e06f9abe43e3518f6e
import pandas
df_sms = pd.read_csv('spam.csv',encoding='latin-1')
df_sms.head()
```

```{python}
#| _uuid: 107c0fe13d78fab5a4f9602e3f430f24c74ad158
df_sms.tail()
```

```{python}
#| _uuid: 9ce3b9b6d760ac0c081cd1673c38f55c09827adb
#Number of observations in each label spam and ham
df_sms.label.value_counts()
```

```{python}
#| _uuid: 2f020baef301472ba7280ff152916cf36360a38d
df_sms.describe()
```

```{python}
#| _uuid: 0e64fe53089b02124da0f41296a7059ad499ce16
df_sms['length'] = df_sms['sms'].apply(len)
df_sms.head()
```

```{python}
print (f"Maximum length of SMS is {max(df_sms['length'])}")
```

```{python}
print (f"Minimim length of SMS is {min(df_sms['length'])}")
```

```{python}
import matplotlib.pyplot as plt

data = list(df_sms['length'])
binsize = 30
plt.hist(data, bins=range(min(data), max(data) + binsize, binsize))

plt.title('Histogram of SMS length')
plt.xlabel("Bins")
plt.ylabel("Frequency")
```

```{python}
#| _uuid: 1c2a9fc260cef3996ca2515e1946e7413c685bd3
#| scrolled: false
df_sms.hist(column='length', by='label', bins=range(min(data), max(data) + binsize, binsize),figsize=(14,4))
```

```{python}
#| _uuid: b187b7705bd949f2ae80f825657adb43b3bb57da
#replace ham with 0 and spam with 1
df_sms.loc[:,'label'] = df_sms.label.map({'ham':0, 'spam':1})
print(df_sms.shape)
df_sms.head()
```

## Bag of Words Approach


What we have here in our data set is a collection of text data (5,572 rows of data). Most ML algorithms rely on numerical data to be fed into them as input, and email/sms messages are usually text heavy.
We need a way to represent text data for machine learning algorithm and the bag-of-words model helps us to achieve that task.
It is a way of extracting features from the text for use in machine learning algorithms.
In this approach, we use the tokenized words for each observation and find the frequency of each token.
Using a process which we will go through now, we can convert a collection of documents to a matrix, with each document being a row and each word(token) being the column, and the corresponding (row,column) values being the frequency of occurrence of each word or token in that document.

For example:

Let's say we have 4 documents as follows:

**['Hello, how are you!',
'Win money, win from home.',
'Call me now',
'Hello, Call you tomorrow?']**

Our objective here is to convert this set of text to a frequency distribution matrix, as follows:
<img src="https://image.ibb.co/casG7U/countvectorizer.png" alt="table">

Here as we can see, the documents are numbered in the rows, and each word is a column name, with the corresponding value being the frequency of that word in the document.

Lets break this down and see how we can do this conversion using a small set of documents.

To handle this, we will be using sklearns count vectorizer method which does the following:

1.  It tokenizes the string(separates the string into individual words) and gives an integer ID to each token.
2. It counts the occurrence of each of those tokens.

**Implementation of Bag of Words Approach in Python**

Step 1: Convert all strings to their lower case form.

```{python}
#| _uuid: 74535171bb8c56beef46d910fc322c8c6f8879ef


documents = ['Hi, how are you?', 
             'Win money, win from home. Call now.', 
             'Hi. Call you now or tomorrow?']

lower_case_documents = []
lower_case_documents = [d.lower() for d in documents]
print(lower_case_documents)
```

Step 2: Removing all punctuations

```{python}
#| _uuid: 0385f268056be9d84613fbc3a492d8b4695480bf
sans_punctuation_documents = []
import string

for i in lower_case_documents:
    sans_punctuation_documents.append(i.translate(str.maketrans("","", string.punctuation)))
    
sans_punctuation_documents
```

Step 3: Tokenization

```{python}
#| _uuid: ef412ffa525e15273eaace2aae4e374a8933091c
preprocessed_documents = [[w for w in d.split()] for d in sans_punctuation_documents]
preprocessed_documents
```

Step 4: Count frequencies

```{python}
#| _uuid: bdcd4677b6634fbe7f75c47262903efdb38100d1
frequency_list = []
import pprint
from collections import Counter

frequency_list = [Counter(d) for d in preprocessed_documents]
pprint.pprint(frequency_list)
```

**Implementing Bag of Words in scikit-learn**


Here we will look to create a frequency matrix on a smaller document set to make sure we understand how the 
document-term matrix generation happens. We have created a sample document set 'documents'.

documents = ['Hello, how are you!',
                'Win money, win from home.',
                'Call me now.',
                'Hello, Call hello you tomorrow?']

```{python}
#| _uuid: 7ca6a8661c2d14ce311a263c8f5b599f099bcd92
from sklearn.feature_extraction.text import CountVectorizer
count_vector = CountVectorizer()
```

**Data preprocessing**

In the above steps, we implemented a version of the CountVectorizer() method from scratch that entailed cleaning our data first. This cleaning involved converting all of our data to lower case and removing all punctuation marks. CountVectorizer() has certain parameters which take care of these steps automatically for us. They are:

`lowercase = True`

The lowercase parameter has a default value of True which converts all of our text to its lower case form.

`token_pattern = (?u)\\b\\w\\w+\\b`

The token_pattern parameter has a default regular expression value of `(?u)\\b\\w\\w+\\b` which ignores all punctuation marks and treats them as delimiters, while accepting alphanumeric strings of length greater than or equal to 2, as individual tokens or words.

`stop_words`

The stop_words parameter, if set to english, will remove all words from our document set that match a list of English stop words which is defined in scikit-learn. Considering the size of our dataset and the fact that we are dealing with SMS messages and not larger text sources like e-mail, we will not be setting this parameter value.

```{python}
#| _uuid: 89698bc13286e251f007438e5143a185874dec8a
count_vector.fit(documents)
count_vector.get_feature_names()
```

```{python}
#| _uuid: 7bdd5c5b641355b80c84ae24142f5ded3e4054ba
doc_array = count_vector.transform(documents).toarray()
doc_array
```

```{python}
#| _uuid: 770d9a3f5b134e81664eea69eae48a38bb5a03aa
frequency_matrix = pd.DataFrame(doc_array, columns = count_vector.get_feature_names())
frequency_matrix
```

### Before generating the document-term matrix, let's separate the SMS data into train and test splits

```{python}
#| _uuid: 1b3e28582c81d0995c2aca898972489cd47f7ffa
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(df_sms['sms'], 
                                                    df_sms['label'],test_size=0.20, 
                                                    random_state=1)
```

```{python}
#| _uuid: d84a48a44851dd6b927e8548e8b1cfcc0e4c0470
# Instantiate the CountVectorizer method
count_vector = CountVectorizer()

# Fit the training data and then return the matrix
training_data = count_vector.fit_transform(X_train)

# Transform testing data and return the matrix. 
testing_data = count_vector.transform(X_test)
```

```{python}
print (training_data.shape)
```

```{python}
print (testing_data.shape)
```

## Implementation of Naive Bayes Machine Learning Algorithm 

We use  sklearns **sklearn.naive_bayes** method to make predictions on our dataset.

Specifically, we use **multinomial Naive Bayes** implementation. This particular classifier is suitable for classification with discrete features (such as in our case, word counts for text classification). It takes in integer word counts as its input. On the other hand **Gaussian Naive Bayes** is better suited for continuous data as it assumes that the input data has a Gaussian (normal) distribution.

```{python}
#| _uuid: 39a499895458b0d9a6f152dfa9a17e279353d0ab
from sklearn.naive_bayes import MultinomialNB
naive_bayes = MultinomialNB()
naive_bayes.fit(training_data,y_train)
```

```{python}
#| _uuid: 6db40f3162c1b627bdb030b4ac6104bf3cc70681
#Make prediction on test dataset
predictions = naive_bayes.predict(testing_data)
```

**Evaluating our model**

Now that we have made predictions on our test set, our next goal is to evaluate how well our model is doing. There are various mechanisms for doing so, but first let's do quick recap of them.

**Accuracy** measures how often the classifier makes the correct prediction. Itâ€™s the ratio of the number of correct predictions to the total number of predictions (the number of test data points).

**Precision** tells us what proportion of messages we classified as spam, actually are spam. It is a ratio of true positives (words classified as spam, and which are actually spam) to all positives (all words classified as spam, irrespective of whether that was the correct classification), in other words it is the ratio of

**[True Positives/(True Positives + False Positives)]**

**Recall(sensitivity)** tells us what proportion of messages that actually are spam were classified by us as spam. It is a ratio of true positives(words classified as spam, and which are actually spam) to all the words that were actually spam, in other words it is the ratio of

**[True Positives/(True Positives + False Negatives)]**

For classification problems that are skewed in their class distributions like in our case, accuracy by itself is not a very good metric. In such cases, precision and recall come in very handy. These two metrics can be combined to get the F1 score, which is the Harmonic meaen of the precision and recall scores. This score can range from 0 to 1, with 1 being the best possible F1 score.

We will be using all 4 metrics to make sure our model does well. For all 4 metrics whose values can range from 0 to 1, having a score as close to 1 as possible is a good indicator of how well our model is doing.

```{python}
#| _uuid: 0bc4167d3ff888530c292ae0ed7a8e924e8caf30
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
print('Accuracy score: {}'.format(accuracy_score(y_test, predictions)))
print('Precision score: {}'.format(precision_score(y_test, predictions)))
print('Recall score: {}'.format(recall_score(y_test, predictions)))
print('F1 score: {}'.format(f1_score(y_test, predictions)))
```

One of the major advantages that **Naive Bayes** has over other classification algorithms is its ability to handle an extremely large number of features. In our case, each word is treated as a feature and there are thousands of different words. Also, it performs well even with the presence of irrelevant features and is relatively unaffected by them.

The other major advantage it has is its relative simplicity. Naive Bayes' works well right out of the box and tuning it's parameters is rarely ever necessary, except usually in cases where the distribution of the data is known. 

It rarely ever overfits the data.

Another important advantage is that its model training and prediction times are very fast for the amount of data it can handle. 


